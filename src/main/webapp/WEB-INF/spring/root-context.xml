<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	
	
	<!-- AOP 연습하기 // XML  -->  
	
	<!-- 공통 로직 -->
	<!-- <bean class="com.choa.aspect.CardCheck" id="cardCheck"></bean> -->

	
	<!-- namespace aop 추가하기 -->
	<!-- <aop:config>
		버스,지하철(핵심)에 카드찍기(공통)
		<aop:aspect id="cardAspect" ref="cardCheck"> cardCheck 에 공통으로 들어갈 것이 있습니다
			어디에 적용할거니
			표현식 패턴에 죄다 적용하시오
			클래스Transport 의 매개변수 있던 없던 몇개던 그 모든 것 ()이라면 없는것
			
				..   : 하위의 모든 디렉토리
				*()	 : 하위의 모든 메서드
				(..) : 모든 매개변수
				expression이 되게 만하요 
			
			<aop:pointcut expression="execution(* com.choa.aspect..Transport.*(..))" id="trans"/>  Transport의 모든것에 공통사항이 들어가요 
			
			언제 적용할거니
			method 는 클래스 중 어떤 메서드를 앞뒤로 실행할거니
			<aop:around method="check" pointcut-ref="trans"/>
			
		</aop:aspect>
		
		여행갈때(핵심) 예약하기(공통)
		<aop:aspect id="cardReserve" ref="cardCheck">
			<aop:pointcut expression="execution(* com.choa.aspect..Trip.*(..))" id="reserve"/>
			<aop:before method="reservation" pointcut-ref="reserve"/>	
		</aop:aspect>
		
		
	</aop:config>
	 -->
	 

	
	
	
	
	
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- property 파일읽어오는 객체 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" id="propertyPlaceholderConfigurer">
		<property name="locations"><!-- 속성value 사용도 가능 -->
			<value>classpath:mybatis/myBatis.properties</value> <!-- 이 파일을 읽겠습니다 -->
		</property>
	</bean>
	
	
	<!-- dataSource -->
	<bean class="org.springframework.jdbc.datasource.DriverManagerDataSource" id="dataSource">
		<property name="username" value="${jdbc.user}"/>
		<property name="password" value="${jdbc.pw}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="driverClassName" value="${jdbc.driver}" />
	</bean>	
		
	
	<!-- Connection과 Mapper연결 -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="mapperLocations" value="classpath:mappers/**/*Mapper.xml"></property>
		<!-- java부분은 배포시에 없어진다 class파일로 저장되는 기본경로:classpath(src/main/resources||...) -->
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property>
	</bean> 
	
		
	<!-- DAO에서 사용할 객체 sqlSession -->
	<bean class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean" />
	</bean>
	
	
	<!-- FileUpload 분리되서 날아오는 애들 합쳐줘야하는데.. 설정-->
	<bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver">
		<property name="defaultEncoding" value="UTF-8"></property>
	</bean>
		
</beans>
